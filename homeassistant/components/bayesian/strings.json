{
  "issues": {
    "manual_migration": {
      "description": "The Bayesian integration now also updates the probability if the observed `to_state`, `above`, `below`, or `value_template` evaluates to `False` rather than only `True`. So it is no longer required to have duplicate, complementary entries for each binary state. Please remove the mirrored entry for `{entity}`.",
      "title": "Manual YAML fix required for Bayesian"
    },
    "no_prob_given_false": {
      "description": "In the Bayesian integration `prob_given_false` is now a required configuration variable as there was no mathematical rationale for the previous default value. Please add this to your `configuration.yml` for `bayesian/{entity}`. These observations will be ignored until you do.",
      "title": "Manual YAML addition required for Bayesian"
    }
  },
  "services": {
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads bayesian sensors from the YAML-configuration."
    }
  },
  "config": {
    "step": {
      "user": {
        "title": "Add a Bayesian Sensor",
        "description": "Create a binary sensor which combines the state from one of state, numeric state or template sensors. Combinations of sensor types are only supported in YAML currently.",

        "menu_options": {
          "state": "Bayesian sensor from state sensors",
          "numeric_state": "Bayesian sensor from numeric ranges",
          "template": "Bayesian sensor from templates"
        }
      },
      "state": {
        "title": "Add a Bayesian Sensor",
        "description": "Create a Bayesian binary sensor which combines the state from multiple entities.",
        "data": {
          "probability_threshold": "Probability Threshold",
          "prior": "Prior",
          "device_class": "Device Class",
          "name": "[%key:common::config_flow::data::name%]",
          "entity_id": "Entities"
        },
        "data_description": {
          "probability_threshold": "The probability above which the sensor will show as 'on'",
          "prior": "The baseline probabilty the sensor should be on, if you knew nothing else about the state of the entities below",
          "entity_id": "The entities to be configured on the next page."
        }
      },
      "numeric_state": {
        "title": "[%key:component::bayesian::config::step::state::title%]",
        "description": "Create a Bayesian binary sensor which combines the state from multiple numeric entities.",
        "data": {
          "probability_threshold": "[%key:component::bayesian::config::step::state::data::probability_threshold%]",
          "prior": "[%key:component::bayesian::config::step::state::data::prior%]",
          "device_class": "[%key:component::bayesian::config::step::state::data::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "entity_id": "[%key:component::bayesian::config::step::state::data::entity_id%]"
        },
        "data_description": {
          "probability_threshold": "[%key:component::bayesian::config::step::state::data_description::probability_threshold%]",
          "prior": "[%key:component::bayesian::config::step::state::data_description::prior%]",
          "entity_id": "[%key:component::bayesian::config::step::state::data_description::entity_id%]"
        }
      },
      "template": {
        "title": "[%key:component::bayesian::config::step::state::title%]",
        "description": "Create a Bayesian binary sensor which combines the state from multiple templates.",
        "data": {
          "probability_threshold": "[%key:component::bayesian::config::step::state::data::probability_threshold%]",
          "prior": "[%key:component::bayesian::config::step::state::data::prior%]",
          "device_class": "[%key:component::bayesian::config::step::state::data::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "value_template0": "Templates"
        },
        "data_description": {
          "probability_threshold": "[%key:component::bayesian::config::step::state::data_description::probability_threshold%]",
          "prior": "[%key:component::bayesian::config::step::state::data_description::prior%]",
          "value_template0": "Templates should return `true`, `false` or nothing"
        }
      }
    }
  },
  "selector": {
    "binary_sensor_device_class": {
      "options": {
        "battery": "[%key:component::binary_sensor::entity_component::battery::name%]",
        "battery_charging": "[%key:component::binary_sensor::entity_component::battery_charging::name%]",
        "carbon_monoxide": "[%key:component::binary_sensor::entity_component::carbon_monoxide::name%]",
        "cold": "[%key:component::binary_sensor::entity_component::cold::name%]",
        "connectivity": "[%key:component::binary_sensor::entity_component::connectivity::name%]",
        "door": "[%key:component::binary_sensor::entity_component::door::name%]",
        "garage_door": "[%key:component::binary_sensor::entity_component::garage_door::name%]",
        "gas": "[%key:component::binary_sensor::entity_component::gas::name%]",
        "heat": "[%key:component::binary_sensor::entity_component::heat::name%]",
        "light": "[%key:component::binary_sensor::entity_component::light::name%]",
        "lock": "[%key:component::binary_sensor::entity_component::lock::name%]",
        "moisture": "[%key:component::binary_sensor::entity_component::moisture::name%]",
        "motion": "[%key:component::binary_sensor::entity_component::motion::name%]",
        "moving": "[%key:component::binary_sensor::entity_component::moving::name%]",
        "occupancy": "[%key:component::binary_sensor::entity_component::occupancy::name%]",
        "opening": "[%key:component::binary_sensor::entity_component::opening::name%]",
        "plug": "[%key:component::binary_sensor::entity_component::plug::name%]",
        "power": "[%key:component::binary_sensor::entity_component::power::name%]",
        "presence": "[%key:component::binary_sensor::entity_component::presence::name%]",
        "problem": "[%key:component::binary_sensor::entity_component::problem::name%]",
        "running": "[%key:component::binary_sensor::entity_component::running::name%]",
        "safety": "[%key:component::binary_sensor::entity_component::safety::name%]",
        "smoke": "[%key:component::binary_sensor::entity_component::smoke::name%]",
        "sound": "[%key:component::binary_sensor::entity_component::sound::name%]",
        "tamper": "[%key:component::binary_sensor::entity_component::tamper::name%]",
        "update": "[%key:component::binary_sensor::entity_component::update::name%]",
        "vibration": "[%key:component::binary_sensor::entity_component::vibration::name%]",
        "window": "[%key:component::binary_sensor::entity_component::window::name%]"
      }
    }
  }
}
